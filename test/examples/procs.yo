--- mode Repl ---

--- test "Call Builtins" ---
print_type(clock()) --> "Int"
cat("Hi", " there") --> "Hi there"

--- test "Maximum Argument Count" ---
f(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0) --> ! ParseError

--- test "Declared Procs" ---
proc square(n: Int) -> Int { n * n }
square(5) --> 25
square(square(2)) --> 16

--- test "Proc Arity Checked" ---
proc f(a: Int, b: Int, c: Int) {}
f(1, 2, 3) --> ()
f(1, 2) --> ! TypeError
f(1, 2, 3, 4) --> ! TypeError

--- test "Proc Types Checked" ---
proc f(a: Bool, b: Int, c: Float) {}
f(true, 1, 5) --> ()
f(1, 2, 3) --> ! TypeError
f(true, 3.5, 4) --> ! TypeError
f(false, 4, "3.4") --> ! TypeError

--- test "Proc Expressions" ---
const id = proc (x: Int) -> Int { x }
id(42) --> 42

--- test "Early Returns" ---
proc safe_if_negative(x: Int) -> () {
	if x < 0 {
		return
	}
	throw ()
}
safe_if_negative(-4)
safe_if_negative(5) --> ! RuntimeError

proc count(start: Int) -> Int {
	var n = start
	while n < 100 {
		if n == 3 {
			return n
		}
		n = n + 1
	}
	throw ()
}
count(1) --> 3

--- test "Invalid Return" ---
return true --> ! TypeError

--- test "Closures" ---
proc make_counter() -> proc() -> Int {
	var i = 0
	return proc () -> Int {
		i = i + 1
		return i
	}
}

var counter1 = make_counter()
counter1() --> 1
counter1() --> 2
counter1() --> 3

var counter2 = make_counter()
counter2() --> 1

--- test "Returning Tuples" ---
proc combine(x: Int, y: Bool) -> (Int, Bool) { (x + 1, !y) }
combine(3, false) --> (4, true)

--- test "Destructuring Params" ---
proc f((x, y, z): (Int, Int, Bool)) -> Int { 
	if z { x + y } else { x - y }
}
f((1, 2, true)) --> 3
f((3, 4, false)) --> -1

--- test "Inferred Return Type for Proc Declarations" ---
proc f { 1 }
const _: () = f()
const _: Int = f() --> ! TypeError

proc g() { 1 }
const _: () = g()
const _: Int = g() --> ! TypeError

proc h() -> { 1 }
const _: () = h()
const _: Int = h() --> ! TypeError

--- test "Inferred Return Type For Proc Expression" ---
const f = proc { 1 }
const _: () = f()
const _: Int = f() --> ! TypeError

const g = proc () { 1 }
const _: () = g() 
const _: Int = g() --> ! TypeError

const h = proc () -> { 1 }
const _: () = h() 
const _: Int = h() --> ! TypeError

--- test "Inferred Parameters For Proc Expressions" ---
type F = proc (Int, Bool) -> Str
const f: F = proc (a, b) -> { "test" }
const f: F = proc (a, b) -> { 4 } --> ! TypeError
const f: F = proc (a) -> { "test" } --> ! TypeError
const f: F = proc (a, b, c) -> { "test" } --> ! TypeError

proc g(p: proc (Bool) -> Int) {}
g(proc (x) -> { 4 })
g(proc () -> { 4 }) --> ! TypeError
g(proc (x, y) -> { 4 }) --> ! TypeError
g(proc (x) -> { true }) --> ! TypeError

--- test "Recursive Procs" ---
proc fib(n: Int) -> Int {
	match n {
		0 => { 0 }
		1 => { 1 }
		n => { fib(n - 1) + fib(n - 2) }
	}
}

fib(0) --> 0
fib(1) --> 1
fib(2) --> 1
fib(3) --> 2
fib(10) --> 55

--- skip "Default Parameter Experessions" ---
proc f(x: Int, y: Int = 4) { y }
f(1) --> 4
f(1, 2) --> 2
f(y=3, x=4) --> 3
f(x=5) --> 4

var side_effect = 0
proc g(x: Int, y = do { 
	side_effect += 1
	x
}) -> { y }
g(7) --> 7
g(1, 2) --> 2
g(1, 2) --> 2
g(y=3, x=4) --> 3
g(x=5) --> 5