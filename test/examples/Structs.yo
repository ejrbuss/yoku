--- mode Repl ---

--- test "Empty Struct" ---
struct Empty {}
const e = Empty {}
e --> Empty {}
Empty () --> ! TypeError

--- test "Simple Struct" ---
struct Point {
	const x: Int
	const y: Int
}

Point { 1, 2 } --> ! ParseError
Point { x = 1 } --> ! TypeError
Point { x = 1, y = 2, z = 3 } --> ! TypeError
Point { x = true, y = 1 } --> ! TypeError
Point { x = 1, y = 2}
Point { y = 1, x = 2 }

const p: Point = Point { x = 100, y = 50 }
p.x --> 100
p.y --> 50

--- test "Struct Errors" ---
struct Bad { var x } --> ! ParseError

--- test "Nested Struct" ---
struct Inner {
	const x: Bool
}

struct Outer {
	const i1: Inner
	const i2: Inner
	const y: Str
}

const e = Outer {
	i1 = Inner { x = true },
	i2 = Inner { x = false },
	y = "t",
}
e.y --> "t"
e.i1.x --> true
e.i2.x --> false

--- test "Mutable fields" ---
struct Point {
	var x: Float
	var y: Float
}

const p = Point { x = 0.5, y = 0.0 }
p.y = p.x * 4.0
p --> Point { x = 0.5, y = 2.0 }

--- test "Struct Type Aliasing" ---
struct Empty {}
type Alt = Empty
Alt {} --> Empty {}

--- test "Initializer Shorthand" ---
struct Point {
	const x: Int
	const y: Int
}

const x = -1
const y = -2
Point { x, y } --> Point { x = -1, y = -2 } 

--- test "Spread Struct Initialization" ---
struct Point {
	const x: Int
	const y: Int
	const z: Int
}

const p1 = Point { x = 1, y = 2, z = 3 }
const p2 = Point { z = 5, ...p1 }
p2 --> Point { x = 1, y = 2, z = 5 }

Point { x = 1, ...p2, z = 3 } --> ! ParseError

--- test "Struct Destructuring" ---
struct Point {
	const x: Int
	const y: Int
	const z: Int
}

const p = Point { x = 1, y = 2, z = 3 }
const Point { x, y, z = zz } = p
x --> 1
y --> 2
zz --> 3
const Point { z } = p
z --> 3

--- test "Tuple Struct" ---
struct Email(Str)

Email("test") --> Email("test")
Email(4) --> ! TypeError
Email(1, 2) --> ! TypeError

const e = Email("t")
if const Email(s) = e { s } else { "_" } --> "t"

e.0 --> "t"

struct Color(Int, Int, Int)

const rgb = Color(255, 0, 125)
(rgb.0, rgb.1, rgb.2) --> (255, 0, 125)

struct Empty()

var e = Empty()
e --> Empty()
e = Empty {} --> ! TypeError