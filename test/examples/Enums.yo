--- mode Repl ---

--- test "Simple Enum" ---
enum Alignment {
	Good,
	Neutral,
	Evil
}

const a: Alignment = Alignment.Good
a --> Alignment.Good

const b = Alignment.Evil
b --> Alignment.Evil

a == Alignment.Good --> true
a === Alignment.Good --> true
b === Alignment.Evil --> true
b === Alignment.Evil --> true
a != b --> true
a !== b --> true

--- test "Matching Enum" ---
enum Parity { Even, Odd }

const _: Int = match Parity.Even {
	Parity.Even => { 0 }
} --> ! TypeError

const a: Int =  match Parity.Odd {
	Parity.Even => { 0 }
	Parity.Odd => { 1 }
}
a --> 1

const b: Int =  match Parity.Even {
	Parity.Even => { 2 }
	else => { 4 }
}
b --> 2

--- test "Tuple Enum" ---
enum TupleEnum {
	None,
	Zero()
	One(Int)
	Two(Bool, Int)
}

var a: TupleEnum = TupleEnum.None
a = TupleEnum.None() --> ! TypeError
a = TupleEnum.Zero --> ! TypeError

a == TupleEnum.None --> true
a == TupleEnum.Zero() --> false
a == TupleEnum.One(1) --> false
a == TupleEnum.Two(false, -7) --> false

a = TupleEnum.One(4)
a == TupleEnum.One(4) --> true
a == TupleEnum.Two(true, 4) --> false

var assert TupleEnum.One(b) = TupleEnum.None --> ! RuntimeError
var assert TupleEnum.Two(b, c) = TupleEnum.Two(false, -1)
b --> false
c --> -1

proc match_tuple(t: TupleEnum) -> Str {
	match t {
		TupleEnum.None => { "None" }
		TupleEnum.Zero => { "Zero" }
		TupleEnum.One(x) => { cat("One", x) }
		TupleEnum.Two(x, y) => { cat(x, y) }
	}
}

match_tuple(TupleEnum.None) --> "None"
match_tuple(TupleEnum.Zero()) --> "Zero"
match_tuple(TupleEnum.One(4)) --> "One4"
match_tuple(TupleEnum.Two(true, 44)) --> "true44"


--- test "Struct Enum" ---

enum StructEnum {
	None,
	Zero {}
	One {
		var a: Int
	}
	Two {
		var b: Bool
		var c: Int
	}
}

var a: StructEnum = StructEnum.None
a = StructEnum.None() --> ! TypeError
a = StructEnum.None {} --> ! TypeError
a = StructEnum.Zero() --> ! TypeError
a = StructEnum.Zero {}

a == StructEnum.None --> false
a == (StructEnum.Zero {}) --> true

a = StructEnum.One { a = 5 }
a == (StructEnum.Zero {}) --> false
a == (StructEnum.One { a = 5 }) --> true
a == (StructEnum.One { a = 6 }) --> false
a == (StructEnum.Two { b = true, c = 7 }) --> false

var assert StructEnum.One { a = b } = StructEnum.None --> ! RuntimeError
var assert StructEnum.Two { b, c = d } = StructEnum.Two { b = false, c = 8 }
b --> false
d --> 8

proc match_struct(t: StructEnum) -> Str {
	match t {
		StructEnum.None => { "None" }
		StructEnum.Zero {} => { "Zero" }
		StructEnum.One { a = x } => { cat("One", x) }
		StructEnum.Two { b = x, c } => { cat(x, c) }
	}
}

match_struct(StructEnum.None) --> "None"
match_struct(StructEnum.Zero {}) --> "Zero"
match_struct(StructEnum.One { a = 4 }) --> "One4"
a = StructEnum.Two { b = false, c = 44 }
match_struct(StructEnum.Two { b = true, ...a }) --> "true44"

--- test "Recursive Enums" ---
enum List {
	Empty,
	Cons(Int, List)
}

var l = List.Empty
l = List.Cons(1, l)
l = List.Cons(2, l)
l --> List.Cons(2, List.Cons(1, List.Empty))

cat(List.Empty, "") --> "List.Empty"
cat(List.Cons(1, List.Empty), "") --> "List.Cons(1, List.Empty)"