--- mode Repl ---

--- test "Simple Enum" ---
enum Alignment {
	Good,
	Neutral,
	Evil
}

const a: Alignment = Alignment.Good
a --> Alignment.Good

const b = Alignment.Evil
b --> Alignment.Evil

a == Alignment.Good --> true
a === Alignment.Good --> true
b === Alignment.Evil --> true
b === Alignment.Evil --> true
a != b --> true
a !== b --> true

--- test "Matching Enum" ---
enum Parity { Even, Odd }

const _: Int = match Parity.Even {
	Parity.Even => { 0 }
} --> ! TypeError

const a: Int =  match Parity.Odd {
	Parity.Even => { 0 }
	Parity.Odd => { 1 }
}
a --> 1

const b: Int =  match Parity.Even {
	Parity.Even => { 2 }
	else => { 4 }
}
b --> 2

--- test "Tuple Enum" ---
enum TupleEnum {
	None,
	Zero()
	One(Int)
	Two(Bool, Int)
}

var a = TupleEnum.None
a == TupleEnum.None --> true
a == TupleEnum.Zero() --> false

a = TupleEnum.One(4)
a == TupleEnum.One(4) --> true
a == TupleEnum.Two(true, 4) --> false

var s: Str = match a {
	TuplEnum.None => { "None" }
	TuplEnum.Zero() => { "Zero" }
	TuplEnum.One(x) => { cat("One", x) }
	TuplEnum.Two(x, y) => { cat(x, y) }
}
s --> "One4"

--- test "Struct Enum" ---