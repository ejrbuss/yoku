--- mode Repl ---

--- test "Implicit Int Literal Conversions" ---
const n = 1
const n: Int = 2
const n: Float = 3

proc f(n: Float) {}
f(4)

const _: (Int, Float) = (5, 6)
const t1 = (1, 2)

--- test "Type Declarations" ---
type MyInt = Int
const a: MyInt = 4
const b: MyInt = true --> ! TypeError
const c: Int = a
type MyInt = Bool --> ! TypeError

type Point = (Int, Int)
const p: Point = (5, 6)

--- test "If Type Resolution" ---
const _: () = if true {}
const _: () = if true {} else {}
const _: () = if true { 3 } else { true } --> ! TypeError
const _: Any = if true { 3 } else { true }
const _: Int = if true { 1 } else { true } --> ! TypeError
const _: Int = if true { 1 } else { 2 }

--- test "Match Type Resolution" ---
const _: () = match {}
const _: () = match { else => {} }

const _: Int = match { if true => { 1 } } --> ! TypeError
const _: Int = match { if true => { 1 } else => { false } } --> ! TypeError
const _: Int = match { if true => { 1 } else => { 2 } }
const _: Any = match { if true => { 1 } else => { false } }

const _: () = match 1 { 1 => {} }
const _: Int = match 1 { 1 => { 2 } } --> ! TypeError
const _: Int = match 1 { 1 => { 2 } else => { false } } --> ! TypeError
const _: Int = match 1 { 1 => { 2 } else => { 2 } }
const _: Int = match 1 { 1 => { 2 } _ => { 2 } }
const _: Any = match 1 { 1 => { 2 } }

--- test "Match Type Assertions" ---
match true { _: Int => {} } --> ! TypeError
const x: Any = true
match x {
	_: Int => { "Int" }
	_: Bool => { "Bool" }
	else => { "Dunno" }
} --> "Bool"

--- test "Runtime Types" ---
type Point = (Int, Int)
const t1: Type = type Point 
t1 --> type (Int, Int)

--- test "Wildcard Types" ---
const _: _ = 4
const _: (Int, _, Bool) = (4, "t", true)
const _: (_, _) = (1, 2, 3) --> ! TypeError

const flows_both_ways: (Float, _) = (1, 2)

match (1, 2) {
	_: (Float, _) => { "mild" }
	_: (Int, _) => { "evil" }
} --> ! TypeError

match (1, 2) {
	_: (_, Int) => { "pure" }
	_: (Int, _) => { "evil" }
} --> "pure"